#
# Copyright  1990-2009 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
#
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#

.PHONY: all pre_target local_vc post_target

all: pre_target javacall_common local_vc post_target

ifeq ($(JAVACALL_DIR),)
$(error JAVACALL_DIR is not set.)
endif

ifeq ($(WINCE_LIB_PATH),)
$(error WINCE_LIB_PATH for Windows CE SDK is not set.)
endif

ifeq ($(VC8CE_ATLMFC_INCLUDE_PATH),)
$(error VC8CE_ATLMFC_INCLUDE_PATH for Visual Studio ATLMFC is not set.)
endif

ifeq ($(VC8CE_ATLMFC_LIB_PATH),)
$(error VC8CE_ATLMFC_LIB_PATH for Visual Studio ATLMFC is not set.)
endif

ifeq ($(WINCE_INCLUDE_PATH),)
$(error WINCE_INCLUDE_PATH for Windows CE SDK is not set.)
endif

ifeq ($(VC8CE_INCLUDE_PATH),)
$(error VC8CE_INCLUDE_PATH is not set.)
endif

ifeq ($(WMSDK10_INCLUDE_PATH),)
$(error WMSDK10_INCLUDE_PATH for Windows Media SDK 10 is not set.)
endif

ifeq ($(VC8_PATH_ROOT),)
$(error VC8_PATH_ROOT is not set.)
endif

include $(JAVACALL_DIR)/build/common.gmk
#add .cpp as porting source?
TEMP0=$(patsubst %.c,%.obj,$(PORTING_SOURCE))
TEMP=$(patsubst %.cpp,%.obj,$(TEMP0))
ifneq ($(FILTER_OBJECTS)x,x)
PORTING_OBJECTS+=$(filter-out $(FILTER_OBJECTS),$(TEMP))
else # ifneq ($(FILTER_OBJECTS)x,x)
PORTING_OBJECTS+=$(TEMP)
endif # ifneq ($(FILTER_OBJECTS)x,x)

ifneq ($(UTILITIES)x, x)
UTILITY_OBJECTS=$(addsuffix .obj,$(UTILITIES))
endif

local_vc: $(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib

CC=$(VC8CE_ARCH_PATH)/cl.exe
CXX=$(VC8CE_ARCH_PATH)/cl.exe
RC=$(VC8CE_ARCH_PATH)/../../../bin/rc.exe

CE_CFLAGS = -D_WIN32_WCE=$(CE_VERSION) -DUNDER_CE=$(CE_VERSION) -D_CE_ALLOW_SINGLE_THREADED_OBJECTS_IN_MTA
CE_CFLAGS += -DARM -D_ARM -D_ARM_
CE_CFLAGS += -I"$(WINCE_INCLUDE_PATH)"
CE_CFLAGS += -I$(WMSDK10_INCLUDE_PATH)
CE_CFLAGS += -I$(VC8CE_ATLMFC_INCLUDE_PATH)
CE_CFLAGS += -I"$(VC8CE_INCLUDE_PATH)"
CE_CFLAGS += /D $(CE_PLATFORM)
ifeq ($(TARGET_WINCE_PLATFORM), WM5_PPC)
CE_CFLAGS += /D WM_PPC_ONLY
else
ifeq ($(TARGET_WINCE_PLATFORM), WM6_PPC)
CE_CFLAGS += /D WM_PPC_ONLY
endif
endif

# -DDNO_GETENV to disable 'getenv' call from jpeg library

DEFAULT_CFLAGS = /X /EHsc /FD /W3 /wd4819 \
	-D_LIB -DARM -D_ARM -D_ARM_ -DUNICODE -D_UNICODE -D_WINDOWS -DNO_GETENV

LOCAL_CFLAGS_debug = /MTd /Zi /Od /GS -D_DEBUG -DDEBUG
LOCAL_CFLAGS_debug += $(DEFAULT_CFLAGS)
LOCAL_CFLAGS_debug += $(CE_CFLAGS)

LOCAL_CFLAGS_release = /MT /O2 /Os /Gm /EHsc /Zi /fp:fast /GR- /MT -DNDEBUG
LOCAL_CFLAGS_release += $(DEFAULT_CFLAGS)
LOCAL_CFLAGS_release += $(CE_CFLAGS)

IS_CYGWIN_Cygwin=1

CXXFLAGS=-nologo $(LOCAL_CFLAGS_$(BUILD))
CFLAGS=-nologo $(LOCAL_CFLAGS_$(BUILD))
CPPFLAGS+= $(if $(IS_CYGWIN_$(shell uname -o)), -I$(shell cygpath -m $(JAVACALL_OUTPUT_INCLUDE_DIR)), -I$(JAVACALL_OUTPUT_INCLUDE_DIR))
CPPFLAGS+= $(SPECIFIC_DEFINITIONS)

AR=$(VC8CE_ARCH_PATH)/lib.exe
ARFLAGS= /MACHINE:ARM /nologo

RCFLAGS+= -D_WIN32_WCE=$(CE_VERSION) /I"${WINCE_INCLUDE_PATH}" -DUNDER_CE=$(CE_VERSION) /d "UNICODE" /d "_UNICODE"

OUTPUT_OPTION=$(if $(IS_CYGWIN_$(shell uname -o)), -Fo$(shell cygpath -m $@), -Fo$@)  \
              -Fp$(JAVACALL_OUTPUT_OBJ_DIR)/javacall \
              -Fd$(JAVACALL_OUTPUT_OBJ_DIR)/javacall

PROPERTY_OBJECTS=$(addsuffix .obj,$(PROPERTY_FILES))

$(JAVACALL_OUTPUT_OBJ_DIR)/%.res: %.rc
	@echo "...compiling resources ... "
	$(RC) $(RCFLAGS) /d "NDEBUG" $(if $(IS_CYGWIN_$(shell uname -o)), /fo"$(shell cygpath -m $@)", /fo"$@") \
	$(if $(IS_CYGWIN_$(shell uname -o)), $(shell cygpath -m $<), $<)

$(JAVACALL_OUTPUT_OBJ_DIR)/%.obj: %.cpp
	@echo -n "...compiling: "
	$(COMPILE.cc) $(OUTPUT_OPTION) $(if $(IS_CYGWIN_$(shell uname -o)), $(shell cygpath -m $<), $<)

$(JAVACALL_OUTPUT_OBJ_DIR)/%.obj: %.c
	@echo -n "...compiling: "
	@echo -n "VPATH is $(VPATH)"
	$(COMPILE.c) $(OUTPUT_OPTION) $(if $(IS_CYGWIN_$(shell uname -o)), $(shell cygpath -m $<), $<)



$(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib: \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PORTING_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(UTILITY_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PROPERTY_OBJECTS)) \
	$(SPECIFIC_OBJECTS)
	@echo "...Generating Library: $@"
	$(if $(IS_CYGWIN_$(shell uname -o)), $(AR) -out:$(shell cygpath -m $@) $(ARFLAGS) `cygpath -m $^`, \
	$(AR) -out:$@ $(ARFLAGS) $^)
